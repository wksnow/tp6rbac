<?php

namespace {%controllerNamespace%};

use {%baseNamespace%}\Base;
use app\admin\validate\admin\AdminValidate;
use wksnow\service\AdminService;
use think\exception\ValidateException;

class Admin extends Base
{
     /**
         * 账号列表
         * @return \think\response\Json
         */
        public function list(AdminService $adminService)
        {
            $param = $this->request->only(['admin_name','nick_name','role_id','status','limit']);
            $limit = $this->request->param('limit');
            return json($adminService->getAdminList($param,$limit));
        }

        /**
         * 新增账户
         * @return \think\response\Json
         */
        public function add(AdminService $adminService)
        {
            $param = $this->request->only(['admin_name','nick_name','admin_avatar','admin_pwd','role_id','status']);
            // 检验完整性
            try {
                validate(AdminValidate::class)->scene('add')->check($param);
            } catch (ValidateException $e) {
                return jsonReturn(-1, $e->getError());
            }
            return json($adminService->addAdmin($param));
        }


        /**
         * 新增账户
         * @return \think\response\Json
         */
        public function edit(AdminService $adminService)
        {
            $param = $this->request->only(['admin_id','admin_name','nick_name','admin_avatar','admin_pwd','role_id','status']);
            // 检验完整性
            try {
                validate(AdminValidate::class)->scene('edit')->check($param);
            } catch (ValidateException $e) {
                return jsonReturn(-1, $e->getError());
            }
            return json($adminService->editAdmin($param));
        }


        /**
         * 修改密码
         * @return \think\response\Json
         */
        public function changePassword(AdminService $adminService)
        {
            $adminPwd = $this->request->param('admin_pwd');
            // 检验完整性
            try {
                validate(AdminValidate::class)->scene('changePassword')->check(['admin_pwd'=>$adminPwd]);
            } catch (ValidateException $e) {
                return jsonReturn(-1, $e->getError());
            }
            return json($adminService->changePassword($this->user['uid'],$adminPwd));
        }

}